{"version":3,"sources":["actions/index.js","components/Link.js","containers/FilterLink.js","components/Footer.js","containers/AddTodo.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","components/App.js","reducers/todos.js","reducers/visibilityFilter.js","reducers/index.js","index.js"],"names":["nextTodoId","VisibilityFilters","Link","_ref","active","children","onClick","react_default","a","createElement","disabled","style","marginLeft","connect","state","ownProps","filter","visibilityFilter","dispatch","type","Footer","FilterLink","input","onSubmit","e","text","preventDefault","value","trim","id","placeholder","ref","node","Todo","completed","textDecoration","TodoList","todos","toggleTodo","map","todo","components_Todo","Object","assign","key","getVisibleTodos","t","Error","App","containers_AddTodo","VisibleTodoList","components_Footer","arguments","length","undefined","action","concat","toConsumableArray","objectSpread","combineReducers","store","createStore","rootReducer","render","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.62f7d53e.chunk.js","sourcesContent":["/**\n * 定义todo项目的action\n * 理解参考：https://redux.js.org/basics/actions\n */\n\n\nlet nextTodoId = 0\n\n/*\n * action creators\n */\n// 定义一个添加的action\nexport const addTodo = text => ({\n  type: 'ADD_TODO',\n  id: nextTodoId++,\n  text\n})\n\n//定义一个设置当前的任务展示选项\nexport const setVisibilityFilter = filter => ({\n  type: 'SET_VISIBILITY_FILTER',\n  filter\n})\n\n// 定义一个切换的action\nexport const toggleTodo = id => ({\n  type: 'TOGGLE_TODO',\n  id\n})\n\n\n\n/*\n * other constants\n */\nexport const VisibilityFilters = {\n  SHOW_ALL: 'SHOW_ALL',\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\n  SHOW_ACTIVE: 'SHOW_ACTIVE'\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\n//Link带有 callback 回调功能的链接\n\n\nconst Link = ({ active, children, onClick }) => (\n    <button\n       onClick={onClick}//onClick() 当点击链接时会触发\n       disabled={active}\n       style={{\n           marginLeft: '4px',\n       }}\n    >\n      {children}\n    </button>\n)\n\nLink.propTypes = {\n  active: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default Link\n","import { connect } from 'react-redux'\nimport { setVisibilityFilter } from '../actions'\nimport Link from '../components/Link'\n\n/**\n*FilterLink 得到当前过滤器并渲染 Link。\n*filter: string 就是当前过滤的状态\n*/\n\n\nconst mapStateToProps = (state, ownProps) => ({\n  active: ownProps.filter === state.visibilityFilter\n})\n\n//store.dispatch映射到了props上\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  onClick: () => dispatch(setVisibilityFilter(ownProps.filter))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Link)\n","import React from 'react'\nimport FilterLink from '../containers/FilterLink'\nimport { VisibilityFilters } from '../actions'\n\n//一个允许用户改变可见todo过滤器的组件\n\nconst Footer = () => (\n  <div>\n    <span>Show: </span>\n    <FilterLink filter={VisibilityFilters.SHOW_ALL}>\n      All\n    </FilterLink>\n    <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>\n      Active\n    </FilterLink>\n    <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>\n      Completed\n    </FilterLink>\n  </div>\n)\n\nexport default Footer\n","/**\n * 定义AddTodo的容器组件\n */\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../actions'\n\nconst AddTodo = ({ dispatch }) => {\n  let input\n\n  return (\n    <div>\n      <form onSubmit={e => {\n        e.preventDefault()\n        if (!input.value.trim()) {\n          return\n        }\n        dispatch(addTodo(input.value))\n        input.value = ''\n      }}>\n        <input placeholder=\"请输入内容\" ref={node => input = node} />\n        <button type=\"submit\">\n          Add Todo\n        </button>\n      </form>\n    </div>\n  )\n}\n\nexport default connect()(AddTodo)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\n/**\n * 一个todo项\n */\n\nconst Todo = ({ onClick, completed, text }) => (\n  <li\n    onClick={onClick}\n    style={{\n      textDecoration: completed ? 'line-through' : 'none'\n    }}\n  >\n    {text}\n  </li>\n)\n\nTodo.propTypes = {\n    /*onClick() 当todo 项被点击时调用的回调函数。*/\n  onClick: PropTypes.func.isRequired,\n    /*completed:boolean todo项是否显示删除线。*/\n  completed: PropTypes.bool.isRequired,\n    /*text: string 显示的文本内容。*/\n  text: PropTypes.string.isRequired\n}\n\nexport default Todo\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Todo from './Todo'\n\n//TodoList 用于显示 todos 列表\n\nconst TodoList = ({ todos, toggleTodo }) => (\n  <ul>\n    {todos.map(todo =>\n      <Todo\n        key={todo.id}\n        {...todo}\n        onClick={() => toggleTodo(todo.id)}\n      />\n    )}\n  </ul>\n)\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n    text: PropTypes.string.isRequired\n  }).isRequired).isRequired,\n  toggleTodo: PropTypes.func.isRequired\n}\n\nexport default TodoList\n","import { connect } from 'react-redux'\nimport { toggleTodo } from '../actions'\nimport TodoList from '../components/TodoList'\nimport { VisibilityFilters } from '../actions'\n\n//来监听 Redux store 变化并处理如何过滤出要显示的数据\n//根据当前显示的状态来对todo列表进行过滤，并渲染TodoList\n\nconst getVisibleTodos = (todos, filter) => {\n  switch (filter) {\n    case VisibilityFilters.SHOW_ALL:\n      return todos\n    case VisibilityFilters.SHOW_COMPLETED:\n      return todos.filter(t => t.completed)\n    case VisibilityFilters.SHOW_ACTIVE:\n      return todos.filter(t => !t.completed)\n    default:\n      throw new Error('Unknown filter: ' + filter)\n  }\n}\n\nconst mapStateToProps = state => ({\n  todos: getVisibleTodos(state.todos, state.visibilityFilter)\n})\n\nconst mapDispatchToProps = dispatch => ({\n  toggleTodo: id => dispatch(toggleTodo(id))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList)\n","import React from 'react'\nimport Footer from './Footer'\nimport AddTodo from '../containers/AddTodo'\nimport VisibleTodoList from '../containers/VisibleTodoList'\n\nconst App = () => (\n  <div>\n    <AddTodo />\n    <VisibleTodoList />\n    <Footer />\n  </div>\n)\n\nexport default App\n","const todos = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [\n        ...state,\n        {\n          id: action.id,\n          text: action.text,\n          completed: false\n        }\n      ]\n    case 'TOGGLE_TODO':\n        // 定义切换的,如果当前点击的id等于传递进来的id就改变状态,否则就不变\n        //???????????????\n      return state.map(todo =>\n        (todo.id === action.id)\n          ? {...todo, completed: !todo.completed}\n          : todo\n      )\n    default:\n      return state\n  }\n}\n\nexport default todos\n","import { VisibilityFilters } from '../actions'\n\nconst visibilityFilter = (state = VisibilityFilters.SHOW_ALL, action) => {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return action.filter\n    default:\n      return state\n  }\n}\n\nexport default visibilityFilter\n","/**\n * 项目需要可以一个组件写一个reducer.js然后用combineReducers合并在一起\n */\nimport { combineReducers } from 'redux'\nimport todos from './todos'\nimport visibilityFilter from './visibilityFilter'\n\nexport default combineReducers({\n  todos,\n  visibilityFilter\n})\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport rootReducer from './reducers'\n\nconst store = createStore(rootReducer)\n\n/*Provider来自于react-redux, 这是react-redux提供的一个核心的API\n*  Provider的意思是，我这个提供器连接了store，那么我这个Provider里面的所有的组件，就都有能力获取到store里的内容了，所以<App>组件在这个<Provider>组件的里面，所以<App>也有能力获取store里面的数据了。\n*  <Provider store={store}>中 store属性的值等于store这个变量\n* */\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}